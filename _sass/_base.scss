%text_cursor {
  cursor: text;
}

%full_size {
  width: 100%;
  height: 100%;
}

%auto_side_margin {
  margin-left: auto;
  margin-right: auto;
}

%no_text_decoration {
  text-decoration: none;
}

@mixin on-event {
  &:hover,
  &:active,
  &:focus {
      @content;
  }
}

@mixin with-events {
  &,
  &:hover,
  &:active,
  &:focus {
      @content;
  }
}

@mixin size($size) {
  width: $size;
  height: $size;
}

@mixin mobile {
  @media (max-width: 768px) {
    @content;
  }
}

@mixin not-on-mobile {
  @media (min-width: 768px) {
    @content;
  }
}

@mixin vendors($property, $value, $vendors...) {
  #{$property}: $value;
  
  @each $vendor in $vendors {
    #{'-' + $vendor + '-' + $property}: $value;
  }
}

%no_select {
  @include vendors(user-select, none, webkit);
}

@mixin with-vendors($mapping, $vendors...) {
  @each $property, $value in $mapping {
    #{$property}: $value;
    
    @each $vendor in $vendors {
      #{'-' + $vendor + '-' + $property}: $value;
    }
  }
}

@mixin to_css_vars($mapping) {
  @each $name, $value in $mapping {
    #{'--' + $name}: $value;
  }
}

@function css_var($name, $fallback: null) {
  @if ($fallback != null) {
    @return var(--#{$name}, $fallback);
  } @else {
    @return var(--#{$name});
  }
}

/*
@function theme($name) {
  @return css_var($name, map-get($theme-default, $name))
}
*/

@function get($map, $key, $default: null) {
  @if (map-has-key($map, $key)) {
    @return map-get($map, $key);
  }
  @return $default;
}

@function icon($name, $type: svg) {
  @return url("/assets/icons/#{$name}.#{$type}");
}

@function image($name, $type: png) {
  @return url("/assets/images/#{$name}.#{$type}");
}

@function google_font($query) {
  @return url("https://fonts.googleapis.com/css?family=#{query}");
}
